*ViT.txt*	Plugin for extended LaTeX support in Vim.
		Last change: 2024 Oct 11

ViT Version 3.5.0-rc.1				    *vit* *vit-toc*
==============================================================================

1. Introduction					    |vit-intro|
2. Configuration Options			    |vit-config|
    2.a The |g:vit_enable| option
    2.b The |g:vit_enable_keybinds| option
    2.c The |g:vit_enable_commands| option
    2.d The |g:vit_leader| option
    2.e The |g:vit_compiler| option
    2.f The |g:vit_max_errors| option
    2.g The |g:vit_jump_chars| option
    2.h The |g:vit_template_remove_on_abort| option
    2.i The |g:vit_comment_line| option
    2.j The |g:vit_autosurround_chars| option
    2.k The |g:vit_compile_on_write| option
3. Templates					    |vit-templates|
    3.a Definition of new Templates		    |vit-templates-new|
    3.b Builtin Templates			    |vit-templates-builtin|
    3.c Insert-Mode Completion			    |vit-completion|
4. Compiling					    |vit-compiling|
5. Editing Improvements				    |vit-editing|
    5.a Smart Typing				    |vit-smart-typing|
    5.b Structural Editing			    |vit-structural-editing|
6. License					    |vit-license|

==============================================================================
1. Introduction					    *vit-intro*

ViT aims to be a fairly configurable, nicely integrated, and reliable plugin
to aid in typesetting specifically mathematics in LaTeX. It comes with many
predefined settings, commands, and templates which can help to start using
ViT right away. The goal is to make ViT very intuitive and to take away as
much repetitive typing effort as possible.

This plugin is mainly intended to aid in my specific workflow, but if you feel
you can gain something from using it, then you are more than welcome to.

GitHub page: https://github.com/MarcelSimader/ViT

See |vit-license| for licensing details.

==============================================================================
2. Configuration Options			    *vit-config*

------------------------------------------------------------------------------
2.a The *g:vit_enable* option (boolean)

Enables or disables the entire plugin.
Default value: >
    let g:vit_enable = 1
<
------------------------------------------------------------------------------
2.b The *g:vit_enable_keybinds* option (boolean)

Enables or disables ViT keybinds.
Default value: >
    let g:vit_enable_keybinds = 1
<
------------------------------------------------------------------------------
2.c The *g:vit_enable_completion* option (boolean)

Enables or disables commands predefined or dynamically created by ViT.
Default value: >
    let g:vit_enable_commands = 1
<
------------------------------------------------------------------------------
2.d The *g:vit_leader* option (string)

Sets the leader key for keybinds in ViT. See <ViT> in |vit-templates-builtin|
for example.
Default value: >
    let g:vit_leader = '<C-@>'
<
------------------------------------------------------------------------------
2.e The *g:vit_compiler* option (dict of {{compiler}: str, {flags}: str,
			      {errregex}: str, {numcomps}: int,
			      {statusline}: str})

Sets the command, and other options, that are used to compile files.

{compiler}:
    The program to execute to compile.
{flags}:
    The default flags to pass to the compiler. Every occurrence of '%' is
    replaced with the root TeX file path. If you need to use '%' as character,
    you can escape it using '\%'.
{errregex}:
    The string used to parse the compiler output. For more information see
    |vit-signs|.
{numcomps}:
    Sets the number of compilations that are performed at once when saving a
    file or calling |vit#Compile()|. Note that the command |:ViTCompile| does not
    use this variable, but instead the provided [count].
{statusline}:
    Sets a command that will be run every time the document is compiled and
    whose result will be put in the statusline. This has special support for
    the Airline Vim plugin.
    The default is set to a command which retrieves how many words are in the
    TeX document. The default uses the 'detex' command to only count words that
    are actually in the final output.
    See {flags} for more detail on how to substitute the file name into the
    command. If you leave this value as empty string or set it to |v:none| it
    will be ignored.

For more info on compiling, see |vit-compiling| and |vit-modeline|.
Default value: >
    let g:vit_compiler = {
	    \ 'compiler': 'pdflatex',
	    \ 'flags': '-interaction=nonstopmode -file-line-error %',
	    \ 'errregex':
		\ '^\s*\(.\{-1,}\)\s*:\s*\(\d\{-1,}\)\s*:\s*\(.\{-1,}\)\s*$',
	    \ 'numcomps': 1,
	    \ 'statusline': 'sh -c "detex % | wc -w"',
	\ }
>
------------------------------------------------------------------------------
2.f The *g:vit_max_errors* option (number)

Sets the maximum number of errors that are matched and displayed when
compiling using |vit-compiling| features.
Default value: >
    let g:vit_max_errors = 10
<
------------------------------------------------------------------------------
2.g The *g:vit_jump_chars* option (list of strings)

Sets the characters that are considered when using the smart-move right
feature of ViT (see |i_<S-Tab>|). The priority of the character is the
position of the character in the list.
Default value: >
    let g:vit_jump_chars = [' ', '(', '[', '{']
<
------------------------------------------------------------------------------
2.h The *g:vit_template_remove_on_abort* option (boolean)

Sets whether or not templates with template arguments are removed again upon
aborting them (i.e. leaving an argument blank).
Default value: >
    let g:vit_template_remove_on_abort = 1
<
------------------------------------------------------------------------------
2.i The *g:vit_comment_line* option (string)

Sets what string to use for full-line comment separators.
Default value: >
    let g:vit_comment_line = '% '.repeat('~', 70)
<
------------------------------------------------------------------------------
2.j The *g:vit_autosurround_chars* option (list of [string, string] lists)

Sets the chars that are automatically surrounded in insert mode. I.e. the
first index is listened for, and then the second index is inserted after the
cursor (see |vit-autosurround|).
Default value: >
    let g:vit_autosurround_chars = [
	\ ['(', ')'], ['[', ']'], ['{', '}'], ['$', '$']
	\ ]

------------------------------------------------------------------------------
2.k The *g:vit_compile_on_write* option (boolean)

Sets whether or not a buffer should be silently compiled every time it is
written to the disk.
Default value: >
    let g:vit_compile_on_write = 0
<
==============================================================================
3. Templates					    *vit-templates*

Templates are a convenient way to insert more complex LaTeX structures into
your document, without having to type out the full thing.

------------------------------------------------------------------------------
3.a Definition of new Templates			    *vit-templates-new*

Templates are defined using the |vit#NewTemplate()| function.

A new template definition is easy to add, just add a new file containing the
definitions. For instance, here we will choose 'definitions.vim', which might
look like this: >
    call vit#NewTemplate('MyTemplate', '<F6>', 0, [], 0,
			\ ['This is some text'], ['This is some more text'])
This template can be invoked by typing the <F6> key in insert mode, and it
will place 'This is some text' above, and 'This is some more text' below the
cursor line.
Next, add the following |:autocmd| wrapped in an |:augroup| to your |vimrc| to
load the definitions: >
    augroup MyDefinitions
	autocmd!
	autocmd FileType latex source path-to-definitions.vim
    augroup END
This autocommand will wait for the ViT-provided latex filetype plugin to load
and then include your template definitions, or anything else you added to
'definitions.vim'.

						    *vit-templates-arguments*
A template with arguments may contain an arbitrary number of template
placeholders with the text '#1', '#2', '#3', ... They must be ordered from 1
to {numargs} (see |vit#NewTemplate()|) but each template placeholder may be put
in as many lines as many times as desired. For an example, see |vit-env|.

A more advanced feature is to use |regex| replacements inside the template
placeholders. The syntax for this looks as follows: '#/pat/sub/n', where 'pat'
is the pattern to match, 'sub' is the substitution text, and 'n' is the number
of the replacement input. This way a template could contain both '#1', and
'#/samham/spamham/1'. When 'samham' is entered by the user, the resulting
texts will be 'samham', and 'spamham' respectively. By default, an expression
is matched with the 'g' flag enabled. This will match it as many times as it
can find 'pat'.

To include a literal '#', simply use '\#'. For instance, to include '#1' in the
output, write '\#1'.

						    *vit#NewTemplate()*
vit#NewTemplate({name}, {keybind}, {inlinemode},
	       {finalcursoroffset}, {middleindent},
	       {textbefore}, {textafter} [, {numargs}
	       [, {argname} [, {argdefault} [, {argcomplete}]]]])
	The |vit#NewTemplate()| function will register a new template command
	with the ViT plugin. A function performing the template will be
	returned as |funcref()|. The operation mode of the created command
	depends on the current mode (|vim-modes|) and the truthiness of
	{inlinemode}:

	Normal Mode: ~
	    Both:	     Insert the template at the cursor position.
	Insert Mode: ~
	    Non-Inline Mode: Surround the cursor line with the template
			     using newlines.
	    Inline Mode:     Insert the template at the cursor position.
	Character Visual Mode: ~
	    Both:	     Surround the selection.
	Line Visual Mode: ~
	    Both:	     Surround the selected lines with the template
			     using newlines.

	For instance, in insert mode with {inlinemode} set to true, the
        template |vit-parentheses| will produce the following output: >
	    ...\left(  \right)...
<	But without {inlinemode} it would do the following: >
	    \left(
	    ......
	    \right)
<
	The function will do the following steps, depending on the arguments
	provided, where step 2. depends on {keybind} being non-empty:
	    1. Define the behavior of the command to do:
		1.a. Insert {textbefore} and {textafter} surrounding the
		     to-be-surrounded text.
		2.b. Replace the template arguments if there are any (see
		     |vit-templates-arguments|).
	    [2. Set up a keybind for the command with {keybind}.]
	    3. Register a Vim command.

	The {finalcursoroffset} argument must be of form `[]` for no action,
	`[line]` for putting the cursor in the specified line at column 0, or
	`[line, col]` for putting the cursor in the specified line and column.
	These positions are relative to the start of the template in the
	document.

	The {middleindent} option will indent all the middle lines by the
	specified number of spaces. For instance with |vit-center| (set to 4): >
	    \begin{center}
	        ...
	    \end{center}
<
	The {textbefore} ({textafter}) option is a list of strings of text
	that is inserted before (after) the to-be surrounded text. These
	may be left empty by passing `[]`. It is also possible to include empty
	strings to force a newline only (e.g. `['line break', '']`). Both of
	these options can also be function references (|Funcref|) that return
	a list like described, while taking no arguments. This can be useful to
	get the current value of an option, or call some function (e.g.
	`{-> [&current_option_Val .. '  dynamic line', 'static line']`).

	The {numargs}, {argname}, {argdefault}, and {argcomplete} options
	specify the number of templating arguments (defaults to 0), the
	optional names of these arguments, their optional default value, and
	their optional completion modi as specified by |input()|.

------------------------------------------------------------------------------
3.b Builtin Templates				    *vit-templates-builtin*

ViT comes with a number of predefined |vit-templates|. All of these templates
contain at least a completion item and possibly a keyboard shortcut. A '*' in
the template text indicates the final cursor position. A '#1', '#2', and so
on, indicates a template argument insertion spot. When in visual mode, a '*'
also indicates where surrounded text will go. See |vit-templates-new| for
information on normal and inline templates.

Keybinds are only accessible in insert or visual mode, and only if the keybinds
are listed here. All templates are available as commands.

						    *<ViT>*
<ViT> is a placeholder for the value configured in |g:vit_leader|.

						    *vit-env*
ViTEnv or CTRL-E	     Starts a simple environment template: >
			     \begin{#1}
			         *
			     \end{#1}
<						    *vit-enum* *vit-enum-left*
						    *vit-enum-alph*
						    *vit-itemize*
						    *vit-description*
						    *vit-center* *vit-tabular*
ViTEnum or |<ViT>|e	     Same as |vit-env| for enumerate.
ViTEnumLeft or |<ViT>|E        Same as |vit-enum| for a left-aligned enumerate.
ViTAlphEnum or |<ViT>|l        Same as |vit-enum| for enumerate of alphabetic
			     list items.
ViTAlphEnumLeft or |<ViT>|L    Same as |vit-enum-alph| for a left-aligned
			     enumerate of alphabetic list items.
ViTItemize or |<ViT>|i	     Same as |vit-env| for itemize.
ViTDescription or |<ViT>|d     Same as |vit-env| for description.
ViTCenter or |<ViT>|c	     Same as |vit-env| for center.
ViTTabular or |<ViT>|t	     Starts a tabular environment template: >
			     \begin{tabular}{#1}
			         *
			     \end{tabular}
<                                                   *vit-figure*
ViTFigure or |<ViT>|f	     Starts a figure environment template: >
			     \begin{figure}[#1]
			         *
                                 \caption{#2}
                                 \label{sec:#/\s/-/2}
			     \end{figure}
ViTFigureCenter or |<ViT>|F    Same as *vit-figure* but with centering.
 						    *vit-chapter* *vit-section*
						    *vit-paragraph*
ViTChapter or |<ViT>|C         Starts a chapter with label template: >
			     \chapter{#1}
			     \label{sec:#/\s/-/1}
ViTSection or |<ViT>|s         Same as |vit-chapter| but for section.
ViTSubSection or |<ViT>|ss     Same as |vit-chapter| but for subsection.
ViTSubSubSection or |<ViT>|sss Same as |vit-chapter| but for subsubsection.
ViTParagraph or |<ViT>|p       Same as |vit-chapter| but for paragraph.
ViSubTParagraph or |<ViT>|pp   Same as |vit-chapter| but for subparagraph.
 						    *vit-math* *vit-gather*
						    *vit-equation* *vit-align*
						    *vit-proof* *vit-matrix*
ViTEquation or |<ViT>|q        Same as |vit-env| for equation*.
ViTGather or |<ViT>|g	     Same as |vit-env| for gather*.
ViTAlign or |<ViT>|a	     Same as |vit-env| for align*.
ViTAlignAt or |<ViT>|A	     Same as |vit-env| for alignat*: >
			     \begin{alignat*}{#1}
				 *
			     \end{alignat*}
ViTProof or |<ViT>|r	     Same as |vit-env| for proof.
ViTMatrix or |<ViT>|m	     Same as |vit-env| for matrix: >
			     \begin{matrix}{#1}
				 *
			     \end{matrix}
<						    *vit-math-mode*
						    *vit-parentheses*
						    *vit-overbrace* *vit-frac*
						    *vit-sqrt* *vit-root*
						    *vit-sum* *vit-lim*
ViTMathMode or |<ViT>|$        Start text math mode template: >
			     $*$
ViTParentheses or |<ViT>|(     Starts a left-right parentheses template: >
			     \left( * \right)
ViTBrackets or |<ViT>|[        Same as |vit-parentheses| but with brackets ([).
ViTBraces or |<ViT>|{	     Same as |vit-parentheses| but with braces ({).
ViTBars or |<ViT>| |	     Same as |vit-parentheses| but with bars (|).
ViTOverbrace or |<ViT>|1       Starts a overbrace template: >
			     \overbrace{*}^{}
ViTUnderbrace or |<ViT>|2      Same as |vit-overbrace| but with an underbrace.
ViTBoxed or |<ViT>|3           Starts a boxed template: >
			     \boxed{*}
ViTFrac			     Starts a fraction template: >
			     \frac{*}{}
ViTSqrt			     Starts a square root template: >
			     \sqrt{*}
ViTRoot			     Same as |vit-sqrt| but for an n-th root: >
			     \sqrt[*]{}
ViTSum			     Starts a sum template: >
			     \sum_{*}^{}
ViTInt			     Same as |vit-sum| but for an integral.
ViTProd			     Same as |vit-sum| but for a product.
ViTLim			     Starts a limit template: >
			     \lim_{*}
ViTSup			     Same as |vit-lim| but for the supremum.
ViTInf			     Same as |vit-lim| but for the infimum.
						    *vit-emphasize*
						    *vit-bold* *vit-italics*
ViTEmphasize or |<ViT>|em      Starts an emphasis template: >
                             \emph{*}
<ViTBold or |<ViT>|bo	     Same as |vit-emphasize| but with bold-face.
ViTItalics or |<ViT>|it	     Same as |vit-emphasize| but with italics.

------------------------------------------------------------------------------
3.c Insert-Mode Completion			    *vit-completion*

ViT can show |vit-templates| to the user in an insert-mode completion window
(see |ins-completion|). The items are displayed as, and matched against the
first line of their definition. Inline templates have an 'i' visible in the
completion menu.

|<ViT>|<Space>	    Triggers ViT insert-mode completion.
|<ViT>||<ViT>|	    -"-

When an item is selected, the corresponding template is executed (e.g. typing
'\frac{' may bring up the |vit-frac| template). Furthermore, a popup menu next
to the completion menu shows a preivew of what the full template looks like.
The template is displayed similarly to the way they are written in
|vit-templates-builtin|.

To avoid interfering with more advanced LSP completion, this mode of completion
is not the same as the usual completion accessed using |i_CTRL-X|.

==============================================================================
4. Compiling					    *vit-compiling*

ViT provides a command for compiling the current buffer with a globally
specified compiler (|g:vit_compiler|) with globally specified compiler flags,
error parsing reg-ex, and number of repeated compilations. ViT can follow file
hierarchies and either use the global value of the variable mentioned, or a
custom per-buffer variable b:vit_compiler, which is usually set using the
|vit-modeline| feature.

ViT also sets up an autocommand, so that writing a buffer will cause it to be
compiled with |:ViTCompile!| automatically.
    WARNING: This feature is no longer enabled by default. See
	     |g:vit_compile_on_write| to turn it back on.

						    *vit-signs*
						    *vit-compiling-signs*
The maximum number of error signs depends on |g:vit_max_errors|. When this is
set to 0, no signs will be displayed. If no log file is found in the
directory, then there will be a warning message displayed. In either case, the
status message will show whether or not the process exited normally or with
errors.

When the normal mode cursor is in the line of an error sign, then the error
message causing this line to be highlighted will be displayed in the status
line.

Additionally, each sign will be visible in the |quickfix| list.

						    *vit-modeline*
						    *vit-compiling-modeline*
Sometimes, specific files require a different compiler or different
compilation settings. For instance, LaTeX files with a bibliography need to be
compiled twice. To make small changes like this easier, it is possible to add
a modeline comment to a LaTeX file that ViT may consider when calling the
|:VitCompile| commands.

As an example, let us look at a file called 'test.tex' with the following
contents: >
    \documentclass{standalone}
    % ViT 2x xetex -
    \begin{document}
	... something that needs two compilations with xetex
    \end{document}
As we can see, the compilation-type modeline can be placed anywhere in the
first few lines of the document with the general form '% ViT {n}x {compiler}
{args...}', where {n} denotes how many times to compile, and {compiler} and
{args...} specify the compiler and its arguments.

{args...} can contain one special character, '%', which will be replaced by
the file to be compiled. This can also be escapes to by using '\%' to get the
literal '%' in the arguments.

{compiler} and {args...} may be set to '-' in which case the default global
value is used, otherwise it is assumed to be empty. This way the compiler and
arguments can be set independently of each other. If both values are empty,
they are both assumed to be '-'.

						    *vit-included-in*
Here is another example using both the compilation-type, and the
included-in-type modeline: >
    \documentclass{standalone}
    % ViT 2x
    % ViT included in other_file.tex
    \begin{document}
	... something that needs two compilations, but
	    starting at 'other_file.tex'
    \end{document}
This type of modeline follows the general form '% ViT included in {file}',
where {file} is simply another file which has the current file included. ViT
will traverse this file-tree starting at the current buffer upwards to reach
the root file. This is where the compilation will finally take place. Any
settings set lower in the tree will be applied first and override ones higher
in the tree.

Note: It is required that the modeline starts with the string '% ViT',
although with arbitrary white space. Modeline types CANNOT be duplicated and
will cause an error (e.g. defining two different compilers).

A pseudo-BNF specification of this modeline looks as follows: >

     Modeline      ::= ^ <ViTPrefix> \s+ ( <Compilation> | <Included> ) \s* $ ;
     ViTPrefix     ::= .* '%' \s* 'ViT'

     Compilation   ::= <Numcomps> ( \s+ <OnWrite> )?
                           ( \s+ <Compiler> ( \s+ <CompilerFlags> )? )? ;
     OnWrite       ::= 'onwrite' | 'on-write' | 'onsave' | 'on-save' ;
     Numcomps      ::= ( 'x' \d\+ ) | ( \d\+ 'x' ) ;
     Compiler      ::= '-' | \w+ ;
     CompilerFlags ::= '-' | .+ ;

     Included      ::= 'included in' \s+ <File> ;
     File          ::= .+ ;
<
						    *:ViTCompile*
						    *:ViTCompile!*
:[count]ViTCompile[!]
	Compiles the current buffer in the directory of the buffer [count]
	times. This number of compilations defaults to 1.

	The non-bang version starts a terminal (|:term|), while the bang
	version starts a background |job|. You may want to use a terminal in
	case you want to carefully examine the error outputs. If you do not
	care about the exact output, you may want to use the automatic output
	features provided by ViT (|vit-compiling-signs|).

	This command is simply a more convenient way to run |vit#Compile()|.

"	Shortcut for :ViTCompile.
!	Shortcut for :ViTCompile!.

						    *vit#Compile()*
vit#Compile({buf} [, {silent} [, {compiler} [, {pwd} ]]])
	This function compiles the current buffer under the (optionally
	specified) working directory {pwd}. To compile buffers which are
	included in other files, ViT uses the |vit-modeline| feature to find
	the root file.

	The compiler can either be set manually or be determined by the value
	of |g:vit_compiler|. This way it is possible to manually change the
	number of compilations, for instance.

	The optional argument {silent} defaults to '', and may be set to '!'
	to determine whether compilation is started in a terminal (|:term|) or
	|job| respectively. This is the same as the bang in |:ViTCompile|.

==============================================================================
5. Editing Improvements				    *vit-editing*

------------------------------------------------------------------------------
5.a Smart Typing				    *vit-smart-typing*

ViT will automatically surround the characters provided by
|g:vit_autosurround_chars| in insert mode. It also provides a smart-move-right
shortcut in insert mode, so that LaTeX (and especially |vit-templates|) can be
traversed more efficiently.

						    *vit-autosurround*
Typing any character specified in the first index of a list entry in
|g:vit_autosurround_chars| will insert the first index of the list entry, then
the second entry, and then move the cursor back by one character.


------------------------------------------------------------------------------
5.b Structural Editing				    *vit-structural-editing*

The following commands are for faster editing in insert mode:

						    *ViT_<S-Tab>*
|<ViT>|<S-Tab>	Move the cursor to the nearest found character specified in
	        |g:vit_jump_chars|, or to the end of the line, in insert mode.


The following commands are for faster editing in normal mode:

    WARNING: The following keybinds/commands only succeed if the '\begin{...}'
	     and '\end{...}' statements are in their own line!

						    *:ViTEnvChange*
						    *ViT_CTRL-C* *ViT_C*
|<ViT>|C
|<ViT>|CTRL-C	    Changes the name of the LaTeX environment the cursor is
		    currently positioned in.
:ViTEnvChange	    Command version of |ViT_CTRL-C|.

						    *:ViTEnvChangeStar*
						    *ViT_star*
|<ViT>|*	    Changes the name of the LaTeX environment to the same name
		    without a star, if it was there, and with a star, if it was
		    not. For instance, 'equation*' to 'equation'.
:ViTEnvChangeStar   Command version of |ViT_star|.

						    *:ViTEnvDelete*
						    *ViT_CTRL-D* *ViT_D*
|<ViT>|D
|<ViT>|CTRL-D	    Deletes the LaTeX environment the cursor is currently
		    positioned in. Automatically un-indents the remaining
		    lines.
:ViTEnvDelete	    Command version of |ViT_CTRL-D|.

==============================================================================
6. License					    *vit-license*

ViT is distributed under the Vim license. See |license| for more details.

 vim:tw=79:ts=8:noet:ft=help:
