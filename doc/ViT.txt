*ViT.txt*	Plugin for extended LaTeX support in Vim.
		Last change: 2021 Dec 19

ViT						    *vit* *vit-toc*
==============================================================================

1. Introduction					    |vit-intro|
2. Configuration Options			    |vit-config|
    2.1  The |g:vit_leader| option
    2.2  The |g:vit_enable_keybinds| option
    2.3  The |g:vit_compiler| option
    2.4  The |g:vit_compiler_flags| option
    2.5  The |g:vit_num_compilations| option
    2.6  The |g:vit_max_errors| option
    2.7  The |g:vit_error_regexp| option
    2.8  The |g:vit_jump_chars| option
    2.9  The |g:vit_template_remove_on_abort| option
    2.10 The |g:vit_comment_line| option
    2.11 The |g:vit_static_commands| option
    2.12 The |g:vit_includes| option
    2.13 The |g:vit_autosurround_chars| option
3. Templates					    |vit-templates|
    3.a Definition of new Templates		    |vit-templates-new|
    3.b Builtin Templates			    |vit-templates-builtin|
4. Insert-Mode Completion			    |vit-completion|
5. Compiling					    |vit-compiling|
6. Smart Typing					    |vit-smart-typing|
7. License					    |vit-license|

==============================================================================
1. Introduction					    *vit-intro*

ViT aims to be a fairly configurable, nicely integrated, and reliable plugin
to aid in typesetting specifically mathematics in LaTeX. It comes with many
predefined settings, commands, and templates which can help to start using
ViT right away. The goal is to make ViT very intuitive and to take away as
much repetitive typing effort as possible.

This plugin is mainly intended to aid in my specific workflow, but if you feel
you can gain something from using it, then you are more than welcome to.

GitHub page: https://github.com/MarcelSimader/ViT

See |vit-license| for licensing details.

==============================================================================
2. Configuration Options			    *vit-config*

------------------------------------------------------------------------------
2.1 The *g:vit_leader* option (string)

Sets the leader key for keybinds in ViT. See <ViT> in |vit-templates-builtin|
for example.
Default value: >
    let g:vit_leader = '<C-@>'
<
------------------------------------------------------------------------------
2.2 The *g:vit_enable_keybinds* option (boolean)

Sets whether or not any keybinds are registered by ViT.
Default value: >
    let g:vit_enable_keybinds = 1
<
------------------------------------------------------------------------------
2.3 The *g:vit_compiler* option (list of form [string, string])

Sets the command that is used to compile files. The first index is used when
compiling silently, the second index is used when compiling in a terminal
window. For more info on compiling, see |vit-compiling|.
Default value: >
    let g:vit_compiler = ['pdflatex', 'pdflatex']
<
------------------------------------------------------------------------------
2.4 The *g:vit_compiler_flags* option (list of form [string, string])

Sets the flags for the command specified by |g:vit_compiler|. The first index
is used for compiling silently, the second index is used when compiling in a
terminal window. The argument 'file-line-error' is needed to ensure the
regular expression in |g:vit_error_regexp| matches in the log file. The
argument '-interaction=nonstopmode' is important for silent execution, as the
user cannot input anything. See |vit-compiling|, and |vit-compiling-signs| for
more details.
Default value: >
    let g:vit_compiler_flags =
        \ ['-interaction=nonstopmode -file-line-error', '-file-line-error']})
<
------------------------------------------------------------------------------
2.5 The *g:vit_num_compilations* option (number)

Sets the number of compilations that are performed at once when saving a file
or calling |vit#Compile()|. Note that the command |:ViTCompile| does not use
this variable, but instead the provided [count].
Default value: >
    let g:vit_num_compilations = 1
<
------------------------------------------------------------------------------
2.6 The *g:vit_max_errors* option (number)

Sets the maximum number of errors that are matched by |g:vit_error_regexp|.
Default value: >
    let g:vit_max_errors = 10
<
------------------------------------------------------------------------------
2.7 The *g:vit_error_regexp* option (string)

Sets the regular expression that is used to match error output in a .log file
generated by compiling the current buffer using |g:vit_compiler|. This matches
errors in the form of 'filename:line:error message' when using the flag
'-file-line-error' in LaTeX compilers. This value may need to be changed
depending on the options your |g:vit_compiler| supports.
Default value: >
    let g:vit_error_regexp =
	\ '^\s*\(.\{-1,}\)\s*:\s*\(\d\{-1,}\)\s*:\s*\(.\{-1,}\)\s*$'
<
------------------------------------------------------------------------------
2.8 The *g:vit_jump_chars* option (list of strings)

Sets the characters that are considered when using the smart-move right
feature of ViT (see |i_<S-Tab>|). The priority of the character is the
position of the character in the list.
Default value: >
    let g:vit_jump_chars = [' ', '(', '[', '{']
<
------------------------------------------------------------------------------
2.9 The *g:vit_template_remove_on_abort* option (boolean)

Sets whether or not templates with template arguments are removed again upon
aborting them (i.e. leaving an argument blank).
Default value: >
    let g:vit_template_remove_on_abort = 1
<
------------------------------------------------------------------------------
2.10 The *g:vit_comment_line* option (string)

Sets what string to use for full-line comment separators.
Default value: >
    let g:vit_comment_line = '% '.repeat('~', 70)
<
------------------------------------------------------------------------------
2.11 The *g:vit_static_commands* option
	(dict of string -> list of strings and dicts)

Sets the commands and templates that are accessible to autocompletion in the
entire Vim instance. Each key is a 'class' (see |vit-scanning| for more info)
mapping to a list of completion option item strings or dicts. This value is
copied from when adding new commands to the global 'g:vit_commands' cache.

Per default, this dict is populated for the key 'latex' by reading from a file
called 'latex_commands.txt' which has one command per line, with optional
empty lines. One can replace this file and place it anywhere in the
'runtimepath' of Vim to use a different set of global static completion items.
Default value: >
    try
        let g:vit_static_commands = {
	    \ 'latex': readfile(findfile('latex_commands.txt', &runtimepath))
	    \ }
    catch
	let g:vit_static_commands = {}
    endtry
<
------------------------------------------------------------------------------
2.12 The *g:vit_includes* option (list of strings)

Sets the currently active 'classes' for the current buffer when used as
'b:vit_includes' variable, and sets the default active 'classes' for new
buffers when set as global variable 'g:vit_includes'. The default value of
this option makes it so that the commands read in by |g:vit_static_commands|'s
default value are accessible by default in all ViT buffers.
Default value: >
    let g:vit_includes = ['latex']
<

------------------------------------------------------------------------------
2.13 The *g:vit_autosurround_chars* option (list of [string, string] lists)

Sets the chars that are automatically surrounded in insert mode. I.e. the
first index is listened for, and then the second index is inserted after the
cursor (see |vit-autosurround|).
Default value: >
    let g:vit_autosurround_chars = [
	\ ['(', ')'], ['[', ']'], ['{', '}'], ['$', '$']
	\ ]
<
==============================================================================
3. Templates					    *vit-templates*

Templates are a convenient way to insert more complex LaTeX structures into
your document, without having to type out the full thing.

------------------------------------------------------------------------------
3.a Definition of new Templates			    *vit-templates-new*

Templates are defined using the |vit#NewTemplate()| function.

A new template definition is easy to add, just add a new file containing the
definitions. For instance, here we will choose 'definitions.vim', which might
look like this: >
    call vit#NewTemplate('MyTemplate', 'myclass', '<F6>', 0, 0, [], 0,
			\ ['This is some text'], ['This is some more text'])
This template can be invoked by typing the <F6> key in insert mode, and it
will place 'This is some text' above, and 'This is some more text' below the
cursor line. The template has class 'myclass' so it is only loaded when
'myclass' is included in the current buffer.
Next, add the following |:autocmd| wrapped in an |:augroup| to your |vimrc| to
load the definitions: >
    augroup MyDefinitions
	autocmd!
	autocmd FileType latex source path-to-definitions.vim
    augroup END
This autocommand will wait for the ViT-provided latex filetype plugin to load
and then include your template definitions, or anything else you added to
'definitions.vim'.

						    *vit-templates-arguments*
A template with arguments may contain an arbitrary number of template
placeholders with the text '#1', '#2', '#3', ... They must be ordered from 1
to {numargs} (see |vit#NewTemplate()|) but each template placeholder may be put
in as many lines as many times as desired. For an example, see |vit-env|.

A more advanced feature is to use |regex| replacements inside the template
placeholders. The syntax for this looks as follows: '#{pat/sub}n', where 'pat'
is the pattern to match, 'sub' is the substitution text, and 'n' is the number
of the replacement input. This way a template could contain both '#1', and
'#{samham/spamham}1'. When 'samham' is entered by the user, the resulting
texts will be 'samham', and 'spamham' respectively. By default, an expression
is matched with the 'g' flag enabled. This will match it as many times as it
can find 'pat'.

Unfortunately, there is no way yet to include the literal '#1' without it
being replaced by the template insertion. However one can utilize the regex
feature to put '#{.*/#1}1'.

						    *vit#NewTemplate()*
vit#NewTemplate({name}, {class}, {keybind}, {inlinemode}, {completionitem}
	       {finalcursoroffset}, {middleindent},
	       {textbefore}, {textafter} [, {numargs}
	       [, {argname} [, {argdefault} [, {argcomplete}]]]])
	The |vit#NewTemplate()| function will register a new template command
	with the ViT plugin. A function performing the template will be
	returned as |funcref()|. The operation mode of the created command
	depends on the current mode (|vim-modes|) and the truthiness of
	{inlinemode}:

	Normal Mode: ~
	    Both:	     Insert the template at the cursor position.
	Insert Mode: ~
	    Non-Inline Mode: Surround the cursor line with the template
			     using newlines.
	    Inline Mode:     Insert the template at the cursor position.
	Character Visual Mode: ~
	    Both:	     Surround the selection.
	Line Visual Mode: ~
	    Both:	     Surround the selected lines with the template
			     using newlines.

	For instance, in insert mode with {inlinemode} set to true, the
        template |vit-parentheses| will produce the following output: >
	    ...\left(  \right)...
<	But without {inlinemode} it would do the following: >
	    \left(
	    ......
	    \right)
<
	The function will do the following steps, depending on the arguments
	provided, where steps 3. and 4. depend on {keybind} being non-empty,
	and {completionitem} being set respectively:
	    1. Define the behavior of the command to do:
		1.a. Insert {textbefore} and {textafter} surrounding the
		     to-be-surrounded text.
		2.b. Replace the template arguments if there are any (see
		     |vit-templates-arguments|).
	    [2. Set up a keybind for the command with {keybind}.]
	    [3. Register the command with the |vit-completion| system.]

	The {finalcursoroffset} argument must be of form [] for no action,
	[line] for putting the cursor in the specified line at column 0, or
	[line, col] for putting the cursor in the specified line and column.
	These positions are relative to the start of the template in the
	document.

	The {middleindent} option will indent all the middle lines by the
	specified number of spaces. For instance with |vit-center| (set to 4): >
	    \begin{center}
	        ...
	    \end{center}
<
	The {textbefore} ({textafter}) option is a list of strings of text
	that is inserted before (after) the to-be surrounded text. These
	may be left empty by passing [].

	The {class} option sets the local class for the completion item. For
	instance if one registers a template with class 'abc', then this
	template will only be accessible if 'abc' is included in the current
	buffer. This value may be set to 'latex' to act as global value. See
	|vit-scanning| for more details.

	The {numargs}, {argname}, {argdefault}, and {argcomplete} options
	specify the number of templating arguments (defaults to 0), the
	optional names of these arguments, their optional default value, and
	their optional completion modi as specified by |input()|.

------------------------------------------------------------------------------
3.b Builtin Templates				    *vit-templates-builtin*

ViT comes with a number of predefined |vit-templates|. All of these templates
contain at least a completion item and possibly a keyboard shortcut. A '*' in
the template text indicates the final cursor position. A '#1', '#2', and so
on, indicates a template argument insertion spot. When in visual mode, a '*'
also indicates where surrounded text will go. See |vit-templates-new| for
information on normal and inline templates.

Keybinds are only accessible in insert or visual mode.

						    *<ViT>*
<ViT> is a placeholder for the value configured in |g:vit_leader|.

						    *vit-env*
ViTEnv or <C-E>		    Starts a simple environment template: >
			    \begin{#1}
				*
			    \end{#1}
<						    *vit-enum* *vit-enum-left*
						    *vit-enum-alph*
						    *vit-center* *vit-tabular*
						    *vit-section* *vit-para*
ViTEnum or |<ViT>|e	     Same as |vit-env| for enumerate.
ViTEnumLeft or |<ViT>|E        Same as |vit-enum| for a left-aligned enumerate.
ViTAlphEnum or |<ViT>|l        Same as |vit-enum| for enumerate of alphabetic
			     list items.
ViTAlphEnumLeft or |<ViT>|L    Same as |vit-enum-alph| for a left-aligned
			     enumerate of alphabetic list items.
ViTCenter or |<ViT>|c	     Same as |vit-env| for center.
ViTTabular or |<ViT>|t	     Starts a tabular environment template: >
			     \begin{tabular}{#1}
			          *
			     \end{tabular}
ViTSection or |<ViT>|s         Starts a section with label template: >
			     \section{#1}
			     \label{sec:#2}
ViTSubSection or |<ViT>|ss     Same as |vit-section| but for subsection.
ViTSubSubSection or |<ViT>|sss Same as |vit-section| but for subsubsection.
ViTParagraph or |<ViT>|p       Same as |vit-section| but for paragraph.
ViSubTParagraph or |<ViT>|pp   Same as |vit-section| but for subparagraph.
 						    *vit-math* *vit-gather*
						    *vit-equation* *vit-align*
						    *vit-proof* *vit-matrix*
ViTEquation or |<ViT>|q        Same as |vit-env| for equation*.
ViTGather or |<ViT>|g	     Same as |vit-env| for gather*.
ViTAlign or |<ViT>|a	     Same as |vit-env| for align*.
ViTAlignAt or |<ViT>|A	     Same as |vit-env| for alignat*: >
			     \begin{alignat*}{#1}
				 *
			     \end{alignat*}
ViTProof or |<ViT>|r	     Same as |vit-env| for proof.
ViTMatrix or |<ViT>|m	     Same as |vit-env| for matrix: >
			     \begin{matrix}{#1}
				 *
			     \end{matrix}
<						    *vit-math-mode*
						    *vit-parentheses*
						    *vit-overbrace* *vit-frac*
						    *vit-sqrt* *vit-root*
						    *vit-sum* *vit-lim*
ViTMathMode or |<ViT>|$        Start text math mode template: >
			     $*$
ViTParentheses or |<ViT>|1     Starts a left-right parentheses template: >
			     \left( * \right)
ViTBrackets or |<ViT>|2        Same as |vit-parentheses| but with brackets ([).
ViTBraces or |<ViT>|3	     Same as |vit-parentheses| but with braces ({).
ViTBars or |<ViT>|4	     Same as |vit-parentheses| but with bars (|).
ViTOverbrace or |<ViT>|<F1>    Starts a overbrace template: >
			     \overbrace{*}^{}
ViTUnderbrace or |<ViT>|<F2>   Same as |vit-overbrace| but with an underbrace.
ViTBoxed or |<ViT>|<F3>        Starts a boxed template: >
			     \boxed{*}
ViTFrac			     Starts a fraction template: >
			     \frac{*}{}
ViTSqrt			     Starts a square root template: >
			     \sqrt{*}
ViTRoot			     Same as |vit-sqrt| but for an n-th root: >
			     \sqrt[*]{}
ViTSum			     Starts a sum template: >
			     \sum_{*}^{}
ViTInt			     Same as |vit-sum| but for an integral.
ViTProd			     Same as |vit-sum| but for a product.
ViTLim			     Starts a limit template: >
			     \lim_{*}
ViTSup			     Same as |vit-lim| but for the supremum.
ViTInf			     Same as |vit-lim| but for the infimum.

==============================================================================
4. Insert-Mode Completion			    *vit-completion*

Insert-Mode completion works by utilizing the Vim builtin omni-func completion
(|compl-omni|). The lowest priority items are the ones read in by
|g:vit_static_commands|, these will be referred to as static completion items.
Then, there are template completion items, which are defined by the
|vit#NewTemplate()| function if the {completionitem} option is truthy.

						    *vit-completion-start*
						    *i_<BSlash>*
<BSlash>		   Inserts \ and starts insert mode completion.
|<ViT>|<Space> or |<ViT>||<ViT>| Starts insert mode completion.

						    *vit-completion-template*
Template completion items behave the same way, but when they are inserted, the
inserted text will be replaced by the template function specified by the
internal data of the item. For instance, selecting |vit-frac| by its
completion item text '\frac{' will start up the template at the current
position. Instead of inserting '\frac{' it will insert '\frac{*}{}', where '*'
is the cursor.

New template completion items are suggest to be added by calling
|vit#NewTemplate()| but it is also possible to manually define them using the
separate |vit#NewCompletionOption()| function.

						    *vit-scanning*
ViT provides a multi-threaded Python utility to read and scan LaTeX '.sty',
'.cls', and '.tex' files. When a new file is scanned, the commands,
environments, and includes of this file will be stored in a global cache (
'g:vit_commands' which is a copy of |g:vit_static_commands|). Each buffer has
a local list of included source files (see |g:vit_includes|) which will
dictate which of these completion options are usable in the current buffer.
The name of the source file (referred to as 'class') is used to index these
includes.

Scanning will occur once when setting the |filetype-plugin|, and once when
writing the full buffer. A faster, less thorough scan is performed each time a
change is made to the currently loaded buffer. One may also manually scan
files using the functions |vit#ScanFromBuffer()| and |vit#ScanFromLog()|.

						    *vit#ScanFromBuffer()*
vit#ScanFromBuffer({buf}, {cwd})
	This function will do a fast scan of the buffer {buf} with the working
	directory {cwd}. The operation will only look at the contents of the
	current buffer and no other source files. No information is removed
	from either the include list or the global command cache. This enables
	the quick scanning of newly written commands without slowing down
	editing.

						    *vit#ScanFromLog()*
vit#ScanFromLog({buf}, {cwd})
	This function will do a thorough scan of the file of {buf} and its
	direct dependencies with the working directory {cwd}. To do so, the
	file {buf} must have been compiled at least once to generate a '.log'
	file. If this file was not created or cannot be found, this scan will
	fail.

	This function updates the include list of {buf} and modifies the
	global command cache by repopulating the 'class' keys which have been
	newly read in to keep the document and any dependencies up-to-date.

						    *vit#NewCompletionOption()*
vit#NewCompletionOption({name}, {class} [, {command}])
	This function adds a new item for ViT's insert-mode completion.

	The argument {name} will show up in the popup menu to be selected.

	The argument {class} determines which local class this completion
	option will be a part of. Set to 'latex' to act as global option.
	See |vit-scanning|.

	The argument {command} is the command that will be called to set the
	text to be inserted instead of {name} directly. It must be publicly
	accessible. If {command} is '', the default value, it will simply act
	like a regular insert mode completion item.

==============================================================================
5. Compiling					    *vit-compiling*

ViT provides a command for compiling the current buffer with a globally
specified compiler (|g:vit_compiler|) with globally specified compiler flags
(|g:vit_compiler_flags|). These variables both contain an array of two
strings, where the first string is used for the terminal version of
|:ViTCompile|, and the second index is used for the |job| version of
|:ViTCompile|. It then reads the log file, if it can be found, to show signs
for errors and output a status message for the compilation. Finally, there is
a |g:vit_num_compilations| variable which sets the number of times a file is
compiled at once.

ViT also sets up an autocommand, so that writing a buffer will cause it to be
compiled with |:ViTCompile!| automatically.

						    *vit-compiling-signs*
The maximum number of error signs depends on |g:vit_max_errors|. When this is
set to 0, no signs will be displayed. If no log file is found in the
directory, then there will be a warning message displayed. In either case, the
status message will show whether or not the process exited normally or with
errors.

When the normal mode cursor is in the line of an error sign, then the error
message causing this line to be highlighted will be displayed in the status
line.

Additionally, each sign will be visible in the |quickfix| list.

						    *:ViTCompile*
						    *:ViTCompile!*
:[count]ViTCompile[!]
	Compiles the current buffer in the directory of the buffer [count]
	times. This number of compilations defaults to 1.

	The non-bang version starts a terminal (|:term|), while the bang
	version starts a background |job|. You may want to use a terminal in
	case you want to carefully examine the error outputs. If you do not
	care about the exact output, you may want to use the automatic output
	features provided by ViT (|vit-compiling-signs|).

	This command is simply a more convenient way to run |vit#Compile()|.

"	Shortcut for :ViTCompile.
!	Shortcut for :ViTCompile!.

						    *vit#Compile()*
vit#Compile({filepath}, {pwd} [, {silent} [, {flags} [, {numcomp} ]]])
	This function compiles the source file {filepath} under the working
	directory {pwd}. The compiler, and the default flags used are both
	determined by |g:vit_compiler|, and |g:vit_compiler_flags|
	respectively. These values depend on the value of {silent} as
	described in |vit-config|.

	The optional argument {silent} defaults to '', and may be set to '!'
	to determine whether compilation is started in a terminal (|:term|) or
	|job| respectively. This is the same as the bang in |:ViTCompile|.

	The optional argument {flags} defaults to '' and can be used to
	provide any additional flags to the compiler.

	The optional argument {numcomp} defaults to whatever value
	|g:vit_num_compilations| is set to, and will specify how many times
	the specified file will be compiled in a row.

==============================================================================
6. Smart Typing					    *vit-smart-typing*

ViT will automatically surround the characters provided by
|g:vit_autosurround_chars| in insert mode. It also provides a smart-move-right
shortcut in insert mode, so that LaTeX (and especially |vit-templates|) can be
traversed more efficiently.

						    *vit-autosurround*
Typing any character specified in the first index of a list entry in
|g:vit_autosurround_chars| will insert the first index of the list entry, then
the second entry, and then move the cursor back by one character.

						    *i_<S-Tab>*
<S-Tab>	    Move the cursor to the nearest found character specified in
	    |g:vit_jump_chars|, or to the end of the line, in insert mode.

==============================================================================
6. License					    *vit-license*

ViT is distributed under the Vim license. See |license| for more details.

 vim:tw=79:ts=8:noet:ft=help:
